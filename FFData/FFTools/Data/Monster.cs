// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FFTools.Data
{

using global::System;
using global::FlatBuffers;

public struct Monster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Monster GetRootAsMonster(ByteBuffer _bb) { return GetRootAsMonster(_bb, new Monster()); }
  public static Monster GetRootAsMonster(ByteBuffer _bb, Monster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Monster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
  public ushort Experience { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort Gil { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort Hp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte Attack { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte NumAttacks { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Hit { get { int o = __p.__offset(16); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Defense { get { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte MagicDefense { get { int o = __p.__offset(20); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Monster> CreateMonster(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      ushort experience = 0,
      ushort gil = 0,
      ushort hp = 0,
      byte attack = 0,
      byte num_attacks = 0,
      byte hit = 0,
      byte defense = 0,
      byte magic_defense = 0) {
    builder.StartObject(9);
    Monster.AddName(builder, nameOffset);
    Monster.AddHp(builder, hp);
    Monster.AddGil(builder, gil);
    Monster.AddExperience(builder, experience);
    Monster.AddMagicDefense(builder, magic_defense);
    Monster.AddDefense(builder, defense);
    Monster.AddHit(builder, hit);
    Monster.AddNumAttacks(builder, num_attacks);
    Monster.AddAttack(builder, attack);
    return Monster.EndMonster(builder);
  }

  public static void StartMonster(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddExperience(FlatBufferBuilder builder, ushort experience) { builder.AddUshort(1, experience, 0); }
  public static void AddGil(FlatBufferBuilder builder, ushort gil) { builder.AddUshort(2, gil, 0); }
  public static void AddHp(FlatBufferBuilder builder, ushort hp) { builder.AddUshort(3, hp, 0); }
  public static void AddAttack(FlatBufferBuilder builder, byte attack) { builder.AddByte(4, attack, 0); }
  public static void AddNumAttacks(FlatBufferBuilder builder, byte numAttacks) { builder.AddByte(5, numAttacks, 0); }
  public static void AddHit(FlatBufferBuilder builder, byte hit) { builder.AddByte(6, hit, 0); }
  public static void AddDefense(FlatBufferBuilder builder, byte defense) { builder.AddByte(7, defense, 0); }
  public static void AddMagicDefense(FlatBufferBuilder builder, byte magicDefense) { builder.AddByte(8, magicDefense, 0); }
  public static Offset<Monster> EndMonster(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // name
    return new Offset<Monster>(o);
  }

  public static VectorOffset CreateSortedVectorOfMonster(FlatBufferBuilder builder, Offset<Monster>[] offsets) {
    Array.Sort(offsets, (Offset<Monster> o1, Offset<Monster> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Monster? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Monster().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
